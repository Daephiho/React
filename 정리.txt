** 2 (21.12.28)
JSX 이용해서 HTML 요소 생성하기. 앞으로 저 아래처럼 쓸 일 없음. 
    const Title = ()
         => (<h3 id="title" 
         onMouseEnter={() 
            => console.log("mouse entered")}>I'm JSX</h3>);
    const Btn = () 
        => (<button style={{backgroundColor: "lightgreen",}} 
        onClick={()
            => console.log("I'm clicked")}>click me</button>);
    
    // JSX로 작성한 코드를 브라우저가 이해할 수 있게 Babel을 이용해 변환시켜줘야 함.

    // JSX 이용해서 리액트 렌더링 하기. 렌더링할 요소의 변수명 첫 글자는 대문자로 하는게 좋음. 소문자면 html코드인 줄 앎
    const Container = () 
        => (<div><Title /><Btn /></div>);

    ReactDOM.render(<Container />, root);

** 3 (21.12.28)
<script type="text/babel">
    const root = document.querySelector("#root");
    let counter = 0;
    function countUp() {
        counter += 1;
        render();     // 리렌더링 해줘야 숫자가 1씩 증가하는 게 보임
    }

    function render() {
        ReactDOM.render(<Container />, root);  
    }
    const Container = () => (
        <div>
            <h3>Total clicks : {counter}</h3>   
            <button onClick={countUp} >click me</button>
        </div>   
    );
    render()

    // 1. 웹 페이지가 시작하면 먼저 render 함수가 실행됨
    // 2. render 함수는 Container 변수를 렌더링하여 root라는 id를 가진 div 안에 넣음
    // 3. click me 버튼을 누르면 countUp 함수가 실행됨.
    // 4. countUp 함수는 counter 변수의 값을 1씩 증가시키고 render함수를 또 실행함.
    // 5. render함수가 다시 실행되면서 올라간 counter 값이 화면에 출력됨
    // => 이 과정에서 리액트는 UI의 변화를 감지하고 요소(counter)를 바꿈. 
    //    다른 요소들까지 다시 불러오는 게 아님. 변화감지->그 부분만 리렌더링 
    //     => 이렇게 계속 render해주는 방식은 잘 안 쓰는 방법임. 
</script>

    ** 3.1 ~ 3.4 
    <script type="text/babel">
    const root = document.querySelector("#root");

    function App() {
        let [counter, setCounter] = React.useState(0); // 초기값=0. counter=0과 동일
        // useState 함수를 부르면 리액트는 배열을 하나 만들어주는데,
        // 그 배열의 첫 번째 요소가 data값이고 두 번째 요소는 data값을 바꿔주는 modifier(setCounter)이다.
       
        // state의 data값을 바꾸는 방법 
    
        // 1번. modifier를 이용해 현재 state를 직접 바꿔주는 방법. 
        // const onClick = () => {
        //     setCounter(counter+=1);   // 클릭하면 값이 1씩 올라가고 자동으로 렌더링됨.
        // }
        
        // 2번. 함수를 이용해 현재 state(current)를 바탕으로 새 state를 계산하는 방법.
            const onClick = () => {
                setCounter((current) => current+1);
            };
        return (
        <div>
            <h3>Total clicks : {counter}</h3>   
            <button onClick={onClick}>click me</button>
        </div>   
    )};
    ReactDOM.render(<App/>, root);
</script>
    

** 3.5 Unit Conversion (21.12.28)

** 분 -> 초 변환기 **
function MToH() {   
        let [amount, setAmount] = React.useState();
        let [flipped, setFlipped] = React.useState(false);
        const onChange = (event) => {           // const 자료형이지만 함수 역할을 함.
            console.log(event);                 // 이벤트 정보 가져오기
            console.log(event.target.value);    // 입력한 값 가져오기
            setAmount(event.target.value);
        }
        const reset = () => setAmount(0);
    
        const onFlip = () => {
            reset();
            setFlipped((current) => !current);  // 두 번째 useState함수의 기본인자는 false. flip버튼을 클릭하면 
                                                // flipped의 state가 false -> true 혹은 그 반대로 변함. 
                                                // state가 true면 minutes input은 disabled, hours input이 입력가능해지고 false가 되면 그 반대.
        }
        return(
        // for: 자바스크립트 속성 => htmlFor로 작성
        <div>
            <label htmlFor="minutes">Minutes</label>   
            <input 
                value={flipped ? amount*60 : amount}
                id="minutes"
                placeholder="Minutes"
                type="number"
                onChange={onChange}
                disabled={flipped}
                />
            <h4>you want to convert {amount} to hours ?</h4>
            <br/>
            <label htmlFor="hours">Hours</label>
            <input 
                value={flipped ? amount : Math.round(amount/60)}
                id="hours"
                placeholder="Hours"
                type="number"
                onChange={onChange}
                disabled={!flipped}
                />
                <button onClick={reset}>Reset</button>
                <button onClick={onFlip}>{flipped ? "Turn back" : "Flip"}</button>  
        </div>
        );
    };




** 4.0 ~ 4.3 Props
<script src="https://unpkg.com/prop-types@15.7.2/prop-types.js"></script>

const MemorizedBtn = React.memo(Btn)    
    // React.memo() : 부모 컴포넌트에 변화가 생기면 모든 컴포넌트들이 리렌더링 되는데, 이건 애플리케이션 속도에 영향을 줄 수 있음.
    //                 리액트 메모는 변화가 있는 컴포넌트만 리렌더링 시켜서 애플리케이션을 더 가볍게 만들어 줌. 

    // propTypes: 받고 있는 prop의 타입이 무엇이어야 하는 지 리액트에게 알려줄 수 있는 패키지. dom방식으로 설치
    //           이 prop의 타입은 ~여야 한다고 알림. 정해둔 타입이 아닌 값이 들어가면 오류메시지 출력.


   MemorizedBtn.propTypes = {
        text: PropTypes.string.isRequired,  // .isRequired: 이 prop은 모든 컴포넌트에 반드시 포함되어야 한다는 의미. 
        changeValue: PropTypes.func,    // isRequired 없으면 이 prop는 있어도 되고 없어도 됨.
    }

  // 하나의 버튼 컴포넌트이지만 UI는 다르다. text라는 props를 생성하고 각자 다른 텍스트를 넣어줌. Btn함수 실행 시 각각 다른 텍스트가 들어감.
    // props는 부모 컴포넌트가 자식 컴포넌트에 값을 전달할 때 사용하는 것이다. 
    // props는 읽기 전용 요소이다. 

    function App() {   // 부모 컴포넌트 
        const [value, setValue] = React.useState("Save Changes")
        const changeValue = () => setValue("Revert Changes")
        return (
            <div>
                <MemorizedBtn text={value} big={true} changeValue={changeValue} />
                <MemorizedBtn text="Confirm" big={false} />
            </div>
        );  
    }
    ReactDOM.render(<App/>, root);


** 5.0 create-react-app: 리액트 애플리케이션을 만들 때 사용하는 도구
        Node.js: JavaScript로 브라우저 밖에서 서버를 구축하는 등의 코드를 실행할 수 있게 해주는 런타임 환경
                  빈번한 I/O처리에 있어서의 우수한 성능, 서버 확장의 용이성, 무엇보다도 JavaScript라는 프론트엔드 필수 언어로 
                  백엔드까지 작성할 수 있다는 엄청난 장점이 있다.